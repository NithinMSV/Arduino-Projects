#include <OneWire.h>
#include <DallasTemperature.h>

// Data wire is plugged into pin 2 on the Arduino
int TempSensor = A0;
// Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
OneWire oneWire(TempSensor);
// Pass our oneWire reference to Dallas Temperature. 
DallasTemperature sensors(&oneWire);

#include <SPI.h>
#include <Ethernet.h>
int val = 0;
int moisturePin1 = A1;
int Moisture1 = 2;
int output;
int motorPin1 = 6;
void readMoisturepin1();


// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};
IPAddress ip(192, 168, 1, 20);

// Initialize the Ethernet server library
// with the IP address and port you want to use
// (port 80 is default for HTTP):
EthernetServer server(80);

void setup() {
  // Open serial communications and wait for port to open:
  Serial.begin(9600);
  sensors.requestTemperatures();
  pinMode(motorPin1,OUTPUT);
  pinMode(Moisture1, OUTPUT);
  pinMode(TempSensor, INPUT);
  pinMode(moisturePin1, INPUT);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }


  // start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
}


void loop() {
  // listen for incoming clients
  EthernetClient client = server.available();
  if (client) {
    Serial.println("new client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");  // the connection will be closed after completion of the response
          client.println("Refresh: 5");  // refresh the page automatically every 5 sec
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          client.println("<head>");
          client.println("<body style=background-color:brown>");
          client.println("<center>");
          client.print("<h3 style=color:white>Temperature is: </h4>");
          
          client.print("<h3 style=color:white>");client.print(sensors.getTempCByIndex(0));client.print(" *C</h3>");
          client.print("<br/>");
          client.println("<h3 style=color:white>Water in first sector is: </h4>");
          client.print("<h3 style=color:white>");client.print(readMoisture1());
          client.print("%");
          client.print("</h3>");
          client.print("<br/>");
          client.println("</center>");
          client.println("</body>");
          client.println("</head>");
          client.println("</html>");
          break;
        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        } else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
    Serial.println("client disconnected");
  }
Serial.println(tempSensor());
Serial.println("Water In Sector 1 = "); Serial.print(analogRead(moisturePin1)); Serial.print("\n ---In Percent: \n"); 
Serial.print(readMoisture1());

moisture1();
delay(5000);
}

//This is a function used to get the soil moisture content

int readMoisture1()
{
    int output;
    output = analogRead(moisturePin1);
    output = map(output,0,1024,0,100);
    Serial.print(output);
    Serial.println("%.\n");
    return(output);
    delay(1000);
}

void moisture1()
       {
      if(analogRead(moisturePin1) <= 300)     
     {
      Serial.print("\n Watering Sector 1 \n");
      digitalWrite(motorPin1,HIGH);   //set pin high
      delay(2000);  
     }
     else
     {
       digitalWrite(motorPin1,LOW);   //set pin low
       Serial.print("\n Watering Sector 1: Healthy \n");
     }
     delay(5000);
     }
  
int tempSensor()
     {
       // Send the command to get temperatures
  sensors.requestTemperatures();  
  Serial.print("Temp is: ");
  Serial.print(sensors.getTempCByIndex(0)); // Why "byIndex"? You can have more than one IC on the same bus. 0 refers to the first IC on the wire
  //Update value every 1 sec.
  Serial.print(" *C");
  delay(1000);
     }
